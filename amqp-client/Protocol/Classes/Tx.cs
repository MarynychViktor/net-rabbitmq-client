namespace AMQPClient.Protocol.Classes;

/// <summary>
/// Generated by AMQPProtocolGenerators application. Class represents "tx" from AMQP protocol.
/// Version 1719733928798
/// <see href="..\AMQPProtocolGenerators\AMQPProtocolGenerators.csproj" />
/// </summary>
public static class Tx {
	/// <summary>
	/// Generated by AMQPProtocolGenerators application. Method represents "select" from AMQP protocol.
	/// <see href="..\AMQPProtocolGenerators\AMQPProtocolGenerators.csproj" />
	/// </summary>
	public class Select : IFrameMethod {
		public short SourceClassId => 90;
		public short SourceMethodId => 10;
		public bool IsAsyncResponse => false;
		public bool HasBody => false;

		public byte[] Serialize() {
			var writer = new BinWriter();
			writer.WriteShort(SourceClassId);
			writer.WriteShort(SourceMethodId);
			return writer.ToArray();
		}

		public void Deserialize(byte[] bytes) {
			var reader = new BinReader(bytes);
			reader.ReadShort();
			reader.ReadShort();
		}
	}

	/// <summary>
	/// Generated by AMQPProtocolGenerators application. Method represents "select-ok" from AMQP protocol.
	/// <see href="..\AMQPProtocolGenerators\AMQPProtocolGenerators.csproj" />
	/// </summary>
	public class SelectOk : IFrameMethod {
		public short SourceClassId => 90;
		public short SourceMethodId => 11;
		public bool IsAsyncResponse => true;
		public bool HasBody => false;

		public byte[] Serialize() {
			var writer = new BinWriter();
			writer.WriteShort(SourceClassId);
			writer.WriteShort(SourceMethodId);
			return writer.ToArray();
		}

		public void Deserialize(byte[] bytes) {
			var reader = new BinReader(bytes);
			reader.ReadShort();
			reader.ReadShort();
		}
	}

	/// <summary>
	/// Generated by AMQPProtocolGenerators application. Method represents "commit" from AMQP protocol.
	/// <see href="..\AMQPProtocolGenerators\AMQPProtocolGenerators.csproj" />
	/// </summary>
	public class Commit : IFrameMethod {
		public short SourceClassId => 90;
		public short SourceMethodId => 20;
		public bool IsAsyncResponse => false;
		public bool HasBody => false;

		public byte[] Serialize() {
			var writer = new BinWriter();
			writer.WriteShort(SourceClassId);
			writer.WriteShort(SourceMethodId);
			return writer.ToArray();
		}

		public void Deserialize(byte[] bytes) {
			var reader = new BinReader(bytes);
			reader.ReadShort();
			reader.ReadShort();
		}
	}

	/// <summary>
	/// Generated by AMQPProtocolGenerators application. Method represents "commit-ok" from AMQP protocol.
	/// <see href="..\AMQPProtocolGenerators\AMQPProtocolGenerators.csproj" />
	/// </summary>
	public class CommitOk : IFrameMethod {
		public short SourceClassId => 90;
		public short SourceMethodId => 21;
		public bool IsAsyncResponse => true;
		public bool HasBody => false;

		public byte[] Serialize() {
			var writer = new BinWriter();
			writer.WriteShort(SourceClassId);
			writer.WriteShort(SourceMethodId);
			return writer.ToArray();
		}

		public void Deserialize(byte[] bytes) {
			var reader = new BinReader(bytes);
			reader.ReadShort();
			reader.ReadShort();
		}
	}

	/// <summary>
	/// Generated by AMQPProtocolGenerators application. Method represents "rollback" from AMQP protocol.
	/// <see href="..\AMQPProtocolGenerators\AMQPProtocolGenerators.csproj" />
	/// </summary>
	public class Rollback : IFrameMethod {
		public short SourceClassId => 90;
		public short SourceMethodId => 30;
		public bool IsAsyncResponse => false;
		public bool HasBody => false;

		public byte[] Serialize() {
			var writer = new BinWriter();
			writer.WriteShort(SourceClassId);
			writer.WriteShort(SourceMethodId);
			return writer.ToArray();
		}

		public void Deserialize(byte[] bytes) {
			var reader = new BinReader(bytes);
			reader.ReadShort();
			reader.ReadShort();
		}
	}

	/// <summary>
	/// Generated by AMQPProtocolGenerators application. Method represents "rollback-ok" from AMQP protocol.
	/// <see href="..\AMQPProtocolGenerators\AMQPProtocolGenerators.csproj" />
	/// </summary>
	public class RollbackOk : IFrameMethod {
		public short SourceClassId => 90;
		public short SourceMethodId => 31;
		public bool IsAsyncResponse => true;
		public bool HasBody => false;

		public byte[] Serialize() {
			var writer = new BinWriter();
			writer.WriteShort(SourceClassId);
			writer.WriteShort(SourceMethodId);
			return writer.ToArray();
		}

		public void Deserialize(byte[] bytes) {
			var reader = new BinReader(bytes);
			reader.ReadShort();
			reader.ReadShort();
		}
	}

}
